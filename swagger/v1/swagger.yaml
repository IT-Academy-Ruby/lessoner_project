---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/{locale}/categories":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    get:
      summary: list categories
      tags:
      - Categories
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/category"
    post:
      summary: create category
      tags:
      - Categories
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/category"
        '422':
          description: invalid request
          content:
            application/json:
              examples:
                example_blank_name:
                  value:
                    errors:
                      name:
                      - can't be blank
                example_blank_description:
                  value:
                    errors:
                      description:
                      - can't be blank
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_category"
  "/{locale}/categories/{id}":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show category
      tags:
      - Categories
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/category"
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    status: 404
                    error: Not found
    put:
      summary: update category
      tags:
      - Categories
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/category"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_category"
  "/{locale}/lessons":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    get:
      summary: list lessons
      tags:
      - Lessons
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/lesson"
    post:
      summary: create lesson
      tags:
      - Lessons
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson_extended"
        '422':
          description: invalid request
          content:
            application/json:
              examples:
                example_blank_author:
                  value:
                    errors:
                      author:
                      - must exist
                example_blank_description:
                  value:
                    errors:
                      description:
                      - can't be blank
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/lesson_create"
  "/{locale}/lessons/{id}":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show lesson
      tags:
      - Lessons
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson_extended"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_not_found"
    put:
      summary: update lesson
      tags:
      - Lessons
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson_extended"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/lesson_update"
    delete:
      summary: delete lesson
      tags:
      - Lessons
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson_delete"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_not_found"
  "/sign_up":
    post:
      summary: create sign_up
      tags:
      - Sign_up
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                  name:
                    type: string
                  phone:
                    type: string
                  gender:
                    type: string
                    enum:
                    - male
                    - female
                    - other
                  email:
                    type: string
                  birthday:
                    type: string
                required:
                - id
                - name
                - gender
                - email
        '400':
          description: bad request
          content:
            application/json:
              examples:
                example_already_exists:
                  value:
                    errors:
                    - Email has already been taken
                    - Name has already been taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                gender:
                  type: string
                  enum:
                  - male
                  - female
                  - other
                email:
                  type: string
                birthday:
                  type: string
                  format: date
                password:
                  type: string
              required:
              - name
              - gender
              - email
              - password
  "/login":
    post:
      summary: give jwt
      tags:
      - Sign_up
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                    example: eyJhbGciOi.InR5cCI6Ik.eyJzdWIiOiI
                required:
                - jwt
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: unathorized
  "/{locale}/users/{id}":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show user
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                  name:
                    type: string
                  description:
                    type: string
                  email:
                    type: string
                  avatar_url:
                    type: string
                required:
                - id
                - name
                - description
                - email
                - avatar_url
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    status: 404
                    error: Not Found
  "/{locale}/check_email?email={email}":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    - name: email
      in: path
      description: email
      required: true
      schema:
        type: string
    get:
      summary: check email
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_exists:
                    type: boolean
                    example: 'true'
                required:
                - email_exists
  "/{locale}/check_username?name={username}":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    - name: username
      in: path
      description: username
      required: true
      schema:
        type: string
    get:
      summary: check username
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  username_exists:
                    type: boolean
                    example: 'true'
                required:
                - username_exists
servers:
- url: http://{herokuapp}
  variables:
    herokuapp:
      default: lessoner.herokuapp.com/
- url: http://{localHost1}
  variables:
    localHost1:
      default: localhost:3000/
- url: http://{localHost2}
  variables:
    localHost2:
      default: 127.0.0.1:3000/
components:
  schemas:
    errors_object:
      type: object
      properties:
        errors:
          "$ref": "#/components/schemas/errors_map"
    errors_map:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    error_not_found:
      type: object
      properties:
        status:
          type: integer
          enum:
          - '404'
          example: 404
        error:
          type: string
          example: Not found
    category:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
      required:
      - id
      - name
      - description
      - status
    create_category:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
      required:
      - name
      - description
    update_category:
      type: object
      minProperties: 1
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
    lesson:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        description:
          type: string
      required:
      - id
      - title
      - description
    lesson_create:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        video_link:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
          example: active
        author_id:
          type: integer
          minimum: 1
        category_id:
          type: integer
          minimum: 1
      required:
      - title
      - description
      - video_link
      - author_id
      - category_id
    lesson_extended:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        description:
          type: string
        video_link:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
          example: active
        author_id:
          type: integer
          minimum: 1
        category_id:
          type: integer
          minimum: 1
      required:
      - id
      - title
      - description
      - status
      - video_link
      - author_id
      - category_id
    lesson_update:
      type: object
      minProperties: 1
      properties:
        title:
          type: string
        description:
          type: string
        video_link:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
          example: active
        author_id:
          type: integer
          minimum: 1
        category_id:
          type: integer
          minimum: 1
    lesson_delete:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 22
      required:
      - id
