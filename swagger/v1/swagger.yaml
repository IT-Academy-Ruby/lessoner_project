---
openapi: 3.0.1
info:
  title: Lessoner API
  version: v1
paths:
  "/categories":
    get:
      summary: list categories
      tags:
      - Categories
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/show_category"
    post:
      summary: create category
      tags:
      - Categories
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/show_category"
        '422':
          description: invalid request
          content:
            application/json:
              examples:
                example_blank_name:
                  value:
                    errors:
                      name:
                      - can't be blank
                example_blank_description:
                  value:
                    errors:
                      description:
                      - can't be blank
              schema:
                "$ref": "#/components/schemas/errors_object"
        '403':
          description: forbidden
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: You don't have permission to access
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_category"
  "/categories/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show category
      tags:
      - Categories
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/show_category"
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    status: 404
                    error: Not found
    put:
      summary: update category
      tags:
      - Categories
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/show_category"
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    status: 404
                    error: Not found
        '403':
          description: forbidden
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: You don't have permission to access
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update_category"
    delete:
      summary: delete category
      tags:
      - Categories
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                required:
                - id
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    status: 404
                    error: Not found
        '403':
          description: forbidden
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: You don't have permission to access
  "/lessons/{lesson_id}/comments":
    parameters:
    - name: lesson_id
      in: path
      description: lesson_id
      required: true
      schema:
        type: string
    get:
      summary: list comments
      tags:
      - Comments
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      minimum: 1
                    body:
                      type: string
                    lesson_id:
                      type: integer
                      minimum: 1
                    user_id:
                      type: integer
                      minimum: 1
                    created_at:
                      type: string
                    updated_at:
                      type: string
                  required:
                  - id
                  - body
                  - lesson_id
                  - user_id
                  - created_at
                  - updated_at
    post:
      summary: create comment
      tags:
      - Comments
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                  body:
                    type: string
                  lesson_id:
                    type: integer
                    minimum: 1
                  user_id:
                    type: integer
                    minimum: 1
                  created_at:
                    type: string
                required:
                - id
                - body
                - lesson_id
                - user_id
                - created_at
        '400':
          description: bad request
          content:
            application/json:
              examples:
                example_blank_body:
                  value:
                    errors:
                    - Body can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
              required:
              - body
  "/lessons/{lesson_id}/comments/{id}":
    parameters:
    - name: lesson_id
      in: path
      description: lesson_id
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    patch:
      summary: update comment
      tags:
      - Comments
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                  body:
                    type: string
                  lesson_id:
                    type: integer
                    minimum: 1
                  user_id:
                    type: integer
                    minimum: 1
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                - id
                - body
                - lesson_id
                - user_id
                - created_at
                - updated_at
        '400':
          description: bad request
          content:
            application/json:
              examples:
                example_blank_body:
                  value:
                    errors:
                    - Body can't be blank
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    error: not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
              required:
              - body
    delete:
      summary: delete comment
      tags:
      - Comments
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                required:
                - id
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                example_unauthorized:
                  value:
                    error: unauthorized
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    error: not found
  "/lessons":
    get:
      summary: list lessons
      parameters:
      - name: page
        in: query
        default: 1
        required: false
        schema:
          type: integer
      - name: items
        in: query
        required: false
        schema:
          type: integer
      - name: status
        in: query
        schema:
          type: string
          enum:
          - active
          - archived
      - name: category_id
        in: query
        required: false
        schema:
          type: integer
      - name: sort_field
        in: query
        required: false
        schema:
          type: string
      - name: sort_type
        in: query
        required: false
        schema:
          type: string
      tags:
      - Lessons
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/lesson"
    post:
      summary: create lesson
      tags:
      - Lessons
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson"
        '422':
          description: invalid request
          content:
            application/json:
              examples:
                example_blank_author:
                  value:
                    errors:
                      author:
                      - must exist
                example_blank_description:
                  value:
                    errors:
                      description:
                      - can't be blank
              schema:
                "$ref": "#/components/schemas/errors_object"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/lesson_create"
  "/lessons/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show lesson
      tags:
      - Lessons
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_not_found"
    put:
      summary: update lesson
      tags:
      - Lessons
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/lesson_update"
    delete:
      summary: delete lesson
      tags:
      - Lessons
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/lesson_delete"
        '404':
          description: not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_not_found"
  "/my_studio/lessons":
    parameters:
    - name: Authorization
      in: header
      required: true
      description: Bearer token
      schema:
        type: string
    get:
      summary: list my_studios
      tags:
      - my_studios
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/lesson"
  "/password/forgot":
    post:
      summary: send reset link to email
      tags:
      - Sign_up
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  alert:
                    type: string
                    example: We've sent a link to restore access to your account to
                      the address email
                required:
                - alert
        '404':
          description: not found
          content:
            application/json:
              examples:
                not_found:
                  value:
                    error: User is not found. Please enter a valid email address
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/password/reset":
    post:
      summary: reset password
      tags:
      - Sign_up
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                required:
                - status
        '404':
          description: not found
          content:
            application/json:
              examples:
                not_found:
                  value:
                    error: Link not valid or expired. Try generating a new link.
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                unprocessable_entity:
                  value:
                    error: User errors full messages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                token:
                  type: string
                password:
                  type: string
              required:
              - email
              - token
              - password
  "/check_email?email={email}":
    parameters:
    - name: email
      in: path
      description: email
      required: true
      schema:
        type: string
    get:
      summary: check email
      tags:
      - Users public
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_exists:
                    type: boolean
                    example: 'true'
                required:
                - email_exists
  "/check_username?name={username}":
    parameters:
    - name: username
      in: path
      description: username
      required: true
      schema:
        type: string
    get:
      summary: check username
      tags:
      - Users public
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  username_exists:
                    type: boolean
                    example: 'true'
                required:
                - username_exists
  "/sign_up":
    post:
      summary: create sign_up
      tags:
      - Sign_up
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                  name:
                    type: string
                  phone:
                    type: string
                  gender:
                    type: string
                    enum:
                    - male
                    - female
                    - other
                  email:
                    type: string
                  birthday:
                    type: string
                  created_at:
                    type: string
                required:
                - id
                - name
                - gender
                - email
        '400':
          description: bad request
          content:
            application/json:
              examples:
                example_already_exists:
                  value:
                    errors:
                    - Email has already been taken
                    - Name has already been taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                gender:
                  type: string
                  enum:
                  - male
                  - female
                  - other
                email:
                  type: string
                birthday:
                  type: string
                  format: date
                password:
                  type: string
              required:
              - name
              - gender
              - email
              - password
  "/login":
    post:
      summary: give jwt
      tags:
      - Sign_up
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                    example: eyJhbGciOi.InR5cCI6Ik.eyJzdWIiOiI
                required:
                - jwt
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: unathorized
  "/users/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show user
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                  name:
                    type: string
                    example: User name
                  description:
                    type: string
                    example: User description
                  email:
                    type: string
                    example: user@gmail.com
                  avatar_url:
                    type: string
                    example: https://lessoner.s3.amazonaws.com/image-url
                  phone:
                    type: string
                    example: "+375291234567"
                  gender:
                    type: integer
                    example: male
                  birthday:
                    type: string
                    example: '2000-01-01'
                  created_at:
                    type: string
                    example: '2022-12-01 14:11:33 +0300'
                required:
                - id
                - name
                - description
                - email
                - avatar_url
                - phone
                - gender
                - birthday
                - created_at
        '404':
          description: not found
          content:
            application/json:
              examples:
                example_not_found:
                  value:
                    status: 404
                    error: Not Found
servers:
- url: https://{lessonerTest}
  variables:
    lessonerTest:
      default: qa-test-pfm3.onrender.com/
- url: https://{lessonerProd}
  variables:
    lessonerProd:
      default: lessoner-project-2w3h.onrender.com/
- url: http://{localHost1}
  variables:
    localHost1:
      default: localhost:3000/
- url: http://{localHost2}
  variables:
    localHost2:
      default: 127.0.0.1:3000/
components:
  schemas:
    errors_object:
      type: object
      properties:
        errors:
          "$ref": "#/components/schemas/errors_map"
    errors_map:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    error_not_found:
      type: object
      properties:
        status:
          type: integer
          enum:
          - '404'
          example: 404
        error:
          type: string
          example: Not found
    category:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
        image_url:
          type: string
          example: https://lessoner.s3.amazonaws.com/image-url
        created_at:
          type: string
          example: '2022-12-01 14:11:33 +0300'
      required:
      - id
      - name
      - description
      - status
      - image_url
      - created_at
    show_category:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
        image_url:
          type: string
          example: https://lessoner.s3.amazonaws.com/image-url
        created_at:
          type: string
          example: '2022-12-01 14:11:33 +0300'
        amount_lessons:
          type: integer
          example: 0
      required:
      - id
      - name
      - description
      - status
      - image_url
      - created_at
      - amount_lessons
    create_category:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
      required:
      - name
      - description
    update_category:
      type: object
      minProperties: 1
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - active
          - archived
          example: archived
    lesson:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
          example: Lesson name
        description:
          type: string
          example: Lesson description
        video_link:
          type: string
          example: http://video.com/my-video
        status:
          type: string
          enum:
          - active
          - archived
          example: active
        author_id:
          type: integer
          minimum: 1
        category_id:
          type: integer
          minimum: 1
        rating:
          type: number
          minimum: 0
        created_at:
          type: string
          example: '2022-12-01 14:11:33 +0300'
        views_count:
          type: integer
          example: 12
      required:
      - id
      - title
      - description
      - status
      - video_link
      - author_id
      - category_id
      - created_at
    lesson_create:
      type: object
      properties:
        title:
          type: string
          example: Lesson name
        description:
          type: string
          example: Lesson description
        video_link:
          type: string
          example: http://video.com/my-video
        status:
          type: string
          enum:
          - active
          - archived
          example: active
        author_id:
          type: integer
          minimum: 1
        category_id:
          type: integer
          minimum: 1
        rating:
          type: number
          minimum: 0
      required:
      - title
      - description
      - video_link
      - author_id
      - category_id
      - rating
    lesson_update:
      type: object
      minProperties: 1
      properties:
        title:
          type: string
          example: Lesson name
        description:
          type: string
          example: Lesson description
        video_link:
          type: string
          example: http://video.com/my-video
        status:
          type: string
          enum:
          - active
          - archived
          example: active
        author_id:
          type: integer
          minimum: 1
        category_id:
          type: integer
          minimum: 1
        rating:
          type: number
          minimum: 0
    lesson_delete:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 22
      required:
      - id
